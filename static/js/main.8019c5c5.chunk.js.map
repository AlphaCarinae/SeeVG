{"version":3,"sources":["img/pointinghand.svg","img/line.svg","img/rectangle.svg","img/ellipse.svg","img/circle.svg","registerServiceWorker.js","components/Board.js","components/Menu.js","components/Controls.js","components/Shapes.js","components/Tools.js","components/SvgCode.js","pages/Home.js","Routes.js","index.js"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mouseIsDown","boardSize","items","points","x1","y1","x2","y2","event","key","Snap","selectAll","remove","_this$refs$board","refs","board","clientHeight","clientWidth","setState","objectSpread","height","width","addEventListener","_handleDelKey","_this$state$points","_this$props","props","tools","color","fillColor","lineWidth","opacity","snap","w","Math","abs","h","oldLineInDrawing","select","newLine","line","attr","stroke","fill","strokeWidth","fill-opacity","addClass","removeClass","x","y","oldRectInDrawing","newRect","rect","oldCircleInDrawing","r","len","newCircle","circle","oldEllipseInDrawing","newEllipse","ellipse","_this2","_this$props2","svg","_this$props$svg","react_default","a","createElement","className","ref","id","viewBox","onClick","target","classList","toggle","selectedElements","forEach","element","toggleClass","onMouseDown","nativeEvent","offsetX","offsetY","onMouseUp","svgRender","onMouseMove","Component","Menu","_downloadSvgFile","document","svgCode","innerSVG","file","Blob","type","href","URL","createObjectURL","download","click","dropDownOpen","menuClick","bind","assertThisInitialized","clearBoard","showSvg","outerSVG","update","svgCodeShow","e","Controls","maxSize","innerWidth","sizes","push","generateSizes","onChange","value","map","size","Shapes","Tools","updateState","obj","objKey","keys","imports","pointer","rectangle","toolset","tool","src","alt","min","max","step","SvgCode","svgClass","Home","shapes","components_Menu","assign","components_Tools","components_Board","components_Controls","components_Shapes","components_SvgCode","Routes","HashRouter","Switch","Route","exact","path","component","ReactDOM","render","getElementById","process","origin","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8019c5c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pointinghand.7401db2d.svg\";","module.exports = __webpack_public_path__ + \"static/media/line.aa6b7239.svg\";","module.exports = __webpack_public_path__ + \"static/media/rectangle.b89a706b.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipse.a5add460.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle.8381b9ef.svg\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component} from 'react';\nimport Snap from 'snapsvg-cjs';\n\nclass Board extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      mouseIsDown: false,\n      boardSize: {},\n      items: { },\n      points: {\n        x1: 0,\n        y1: 0,\n        x2: 0,\n        y2: 0\n      }\n    }\n\n  }\n\n  _handleDelKey(event) {\n    if (event.key === \"Backspace\") {\n      let selectedElements = Snap.selectAll('.selected')\n      selectedElements.remove()\n    }\n  }\n\n  componentDidMount() {\n    //getting the height and width of the board div\n    const {clientHeight, clientWidth} = this.refs.board\n    // const {}\n\n    this.setState({...this.state, boardSize: { height: clientHeight, width: clientWidth}});\n    //bind delete key to delete selected items\n    window.addEventListener(\"keydown\", this._handleDelKey);\n  }\n\n\n  svgRender() {\n\n    const { x1, y1, x2, y2} = this.state.points;\n    const { mouseIsDown } = this.state;\n    const { tools, color, fillColor, lineWidth, opacity } = this.props;\n\n    //ignore random clicks on the same spot\n    if (!(x1 === x2 && y1 === y2)) {\n    // console.log(x1, y1, x2, y2, this.state);\n    let snap = Snap('#drawingBoard');\n    //calculate width and height for rectangle\n    let w = Math.abs(x2 - x1)\n    let h = Math.abs(y2 - y1)\n\n    switch(tools) {\n      case \"pointer\" :\n\n        break;\n      case \"line\" :\n      //remove the last line drawn\n        let oldLineInDrawing = snap.select('.drawingInMotion')\n        if (oldLineInDrawing) { oldLineInDrawing.remove() }\n      //draw new line at the new location\n        let newLine = snap\n                        .line(x1, y1, x2, y2)\n                        .attr({stroke: color, fill: fillColor, strokeWidth: lineWidth, \"fill-opacity\": opacity})\n                        // .click((event) => {tools === \"pointer\" ? event.target.toggleClass(\"selected\") : null})\n        if (mouseIsDown)  {\n          newLine.addClass(\"drawingInMotion\")\n        } else {\n             newLine.addClass(\"drawn\")\n             newLine.removeClass(\"drawingInMotion\")\n         }\n\n\n        break;\n      case \"rectangle\" :\n      //remove the last rectangle drawn\n        let oldRectInDrawing = snap.select('.drawingInMotion')\n        if (oldRectInDrawing) {oldRectInDrawing.remove()}\n      //set x and y to top left corner\n        let x ,y ;\n        (x2 > x1) ? x = x1 : x = x2;\n        (y2 > y1) ? y = y1 : y = y2;\n        let newRect = snap\n                        .rect(x, y, w, h)\n                        .attr({stroke: color, fill: fillColor, strokeWidth: lineWidth, \"fill-opacity\": opacity})\n                        // .click(tools === \"pointer\" ? this.toggleClass : null)\n        if (mouseIsDown)  {\n          newRect.addClass(\"drawingInMotion\")\n        } else {\n             newRect.addClass(\"drawn\")\n             newRect.removeClass(\"drawingInMotion\")\n         }\n        break;\n      case \"circle\" :\n      //remove the last circle drawn\n        let oldCircleInDrawing = snap.select('.drawingInMotion')\n        if (oldCircleInDrawing) {oldCircleInDrawing.remove()}\n        //calculate radius\n        let r = Snap.len(x1,y1,x2,y2)\n        let newCircle = snap\n                        .circle(x1,y1, r)\n                        .attr({stroke: color, fill: fillColor, strokeWidth: lineWidth, \"fill-opacity\": opacity})\n                        // .click(() => {tools === \"pointer\" ? this.toggleClass(\"selected\") : null})\n        if (mouseIsDown)  {\n          newCircle.addClass(\"drawingInMotion\")\n        } else {\n             newCircle.addClass(\"drawn\")\n             newCircle.removeClass(\"drawingInMotion\")\n         }\n        break;\n      case \"ellipse\" :\n      //remove the last circle drawn\n        let oldEllipseInDrawing = snap.select('.drawingInMotion')\n        if (oldEllipseInDrawing) {oldEllipseInDrawing.remove()}\n        let newEllipse = snap\n                        .ellipse(x1,y1, w, h)\n                        .attr({stroke: color, fill: fillColor, strokeWidth: lineWidth, \"fill-opacity\": opacity})\n                        // .click(tools === \"pointer\" ? this.toggleClass : null)\n        if (mouseIsDown)  {\n          newEllipse.addClass(\"drawingInMotion\")\n        } else {\n             newEllipse.addClass(\"drawn\")\n             newEllipse.removeClass(\"drawingInMotion\")\n         }\n        break;\n        default : console.log('no shape match found');\n    }\n  }\n  }\n\n\n\n\n  render() {\n    // console.log(this.props);\n    const { svg, tools }  = this.props;\n    const { height, width} = this.props.svg;\n    return(\n      <div className=\"board\" ref=\"board\">\n        {/* <svg id=\"backBoard\" height={height} width={width}> */}\n          <svg\n            ref=\"svg\"\n            id=\"drawingBoard\"\n            width={width}\n            height={height}\n            viewBox={\"0 0 \" + width + \" \" + height}\n            onClick={(event) => {\n              if (tools === \"pointer\") {\n\n                 if (event.target.id !== \"drawingBoard\")  {\n                   event.target.classList.toggle(\"selected\")\n\n                 } else if (event.target.id === \"drawingBoard\") {\n                   //unselect any other elements which are \"selected\" on the board\n                     let selectedElements = Snap.selectAll('.selected')\n                     if (selectedElements)  {\n                       selectedElements.forEach((element) => element.toggleClass(\"selected\"))\n                     } else {\n                       console.log(\"no selected elements exist\")\n                     }\n                     console.log(\"drawingBoard\")\n                 }\n                 //make sure new shapes are not drawn based on available points in the board state\n              } else {\n\n              }\n            }}\n            onMouseDown={(event) => {\n\n              let points = this.state.points;\n              points.x1 = event.nativeEvent.offsetX;\n              points.y1 = event.nativeEvent.offsetY;\n\n              this.setState({...this.state, points, mouseIsDown: true})\n\n            }}\n            onMouseUp={(event) => {\n              this.setState({...this.state, mouseIsDown: false}, this.svgRender)\n\n            }}\n            onMouseMove={(event) => {\n              //make sure drawing is in progress\n              // and event firing on current object being drawn does not affect points in state\n              // this is to tackle the way firefox handles mousemove event and offsetX, offsetY\n              if (this.state.mouseIsDown)  {\n                let points = this.state.points;\n                points.x2 = event.nativeEvent.offsetX;\n                points.y2 = event.nativeEvent.offsetY;\n                this.setState({...this.state, points}, this.svgRender)\n              }\n            }}\n\n          >\n            {/* All drawn shapes will go here */}\n          </svg>\n        {/* </svg> */}\n      </div>\n    )\n  }\n}\n\n\n\n\nexport default Board\n","import React, { Component } from 'react'\nimport Snap from 'snapsvg-cjs'\n\n\nclass Menu extends Component {\n  constructor() {\n    super();\n    this.state = {\n      dropDownOpen: false\n    }\n    this.menuClick = this.menuClick.bind(this)\n    this.clearBoard = this.clearBoard.bind(this)\n    this.showSvg = this.showSvg.bind(this)\n    this._downloadSvgFile = this._downloadSvgFile.bind(this)\n  }\n\n  clearBoard() {\n    let allElements = Snap.selectAll(\".drawn\")\n    allElements.remove();\n    this.setState({dropDownOpen: false})\n  }\n\n  showSvg() {\n    let snap = Snap('#drawingBoard')\n    let svgCode = snap.outerSVG()\n    this.props.update({svgCode: svgCode, svgCodeShow: true}, this.setState({dropDownOpen: false}))\n  }\n\n  menuClick(e) {\n    this.setState({\n      dropDownOpen: !this.state.dropDownOpen\n    })\n  }\n\n  _downloadSvgFile = () => {\n    const {width, height} = this.props.svg\n    var element = document.createElement(\"a\");\n    let snap = Snap('#drawingBoard')\n    let svgCode = snap.innerSVG()\n    svgCode = '<svg width=\"' + width +'\" height=\"' + height + '\" xmlns=\"http://www.w3.org/2000/svg\">' + svgCode + \"</svg>\"\n    let svgFile = [svgCode]\n    var file = new Blob(svgFile, {type: 'text/plain'});\n\n    element.href = URL.createObjectURL(file);\n    element.download = \"myImage.svg\";\n    element.click();\n  }\n\n  render () {\n\n    const {dropDownOpen} = this.state;\n\n\n    return (\n      <div className=\"menu\">\n        <div>\n          <div onClick={ this.menuClick }>\n            <p>Menu</p>\n          </div>\n            <div className={ dropDownOpen ? \"dropDownOpen\" : \"dropDownClosed\" }>\n\n                <li onClick={this.clearBoard}>New</li>\n                <li onClick={this.showSvg}>Show inline SVG code</li>\n                <li  onClick={this._downloadSvgFile}>Save svg file ...</li>\n\n            </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Menu\n","import React, { Component } from 'react';\n\n\nclass Controls extends Component {\n\n  generateSizes() {\n      //define the acceptable svg dimesions to be selected in Controls sextion\n  let maxSize = window.innerWidth;\n  const sizes = [];\n  let x=100;\n  while (x < maxSize) {\n    sizes.push(x);\n    x += 100;\n  }\n  return sizes\n  }\n\n  render () {\n    const { svg }  = this.props;\n    \n    const sizes = this.generateSizes()\n    \n    return (\n      <div className=\"controls\">\n        <fieldset>\n          <legend>SVG size</legend>\n        <form>\n          <label>\n            svg height\n            <select onChange={(event) => this.props.update({svg: {height: event.target.value, width: svg.width}})} value={svg.height}>\n              {\n                sizes.map( (size) => {\n                  return(\n                    <option value={size} key={size} >{size} </option>\n                  )\n                })\n              }\n            </select>\n          </label>\n\n          <br></br>\n\n          <label>\n            svg width \n            <select onChange={(event) => this.props.update({svg: {height: svg.height, width: event.target.value}})} value={svg.width}>\n              {\n                sizes.map( (size) => {\n                  return(\n                    <option value={size} key={size} >{size}</option>\n                  )\n                })\n              }\n            </select>\n          </label>\n\n        </form>\n        </fieldset>\n      </div>\n    )\n  }\n}\n\n\nexport default Controls;\n","import React, { Component } from 'react';\n\n\nclass Shapes extends Component {\n  render () {\n    return (\n      <div className=\"shapes\">\n      </div>\n    )\n  }\n}\n\n\nexport default Shapes;\n","import React, { Component } from 'react';\nimport Snap from 'snapsvg-cjs';\n\nimport pointer from '../img/pointinghand.svg';\nimport line from '../img/line.svg'\nimport rectangle from '../img/rectangle.svg'\nimport ellipse from '../img/ellipse.svg'\nimport circle from '../img/circle.svg'\n// import move from '../img/move.svg'\n\nclass Tools extends Component {\n\n  updateState = function(obj) {\n    this.props.update(obj)\n    let selectedElements = Snap.selectAll('.selected')\n    if (selectedElements !== null)  {\n      let objKey = Object.keys(obj)[0]\n      switch (objKey) {\n        case \"color\":\n        selectedElements.attr({stroke: obj[objKey]})\n          break;\n        case \"fillColor\":\n        selectedElements.attr({fill: obj[objKey]})\n          break;\n        case \"opacity\":\n        selectedElements.attr({\"fill-opacity\": obj[objKey]})\n          break;\n        case \"lineWidth\":\n        selectedElements.attr({strokeWidth: obj[objKey]})\n          break;\n        default:\n\n      }\n    }\n\n  }\n\n  render () {\n    const imports = {\n      pointer: pointer,\n      line: line,\n      circle: circle,\n      rectangle: rectangle,\n      ellipse: ellipse,\n    }\n    const toolset = Object.keys(imports);\n    const { color, fillColor, opacity, lineWidth } = this.props;\n    return (\n        <div className=\"tools\">\n          <fieldset>\n          {\n            toolset.map( (tool) => {\n          return(\n\n              <button onClick={(event) => this.props.update({tools: tool})} key={tool}>\n                <div>\n                  <img src={imports[tool]} alt=\"shape tool selector\" key={tool}/>\n                </div>\n              </button>\n\n          )})\n          }\n          </fieldset>\n\n          <fieldset>\n            <input className=\"colorPicker\" type=\"color\" value={color} onChange={(event) => this.updateState({color: event.target.value})}></input>\n            <input className=\"colorPicker\" type=\"color\" value={fillColor} onChange={(event) => this.updateState({fillColor: event.target.value})}></input>\n          </fieldset>\n\n          <fieldset>\n            <label>Opacity: {opacity}\n              <input type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" value={opacity} onChange={(event) => this.updateState({opacity: event.target.value})}></input>\n            </label>\n            <br></br>\n\n            <label>Line width: {lineWidth}\n              <input type=\"range\" min=\"1\" max=\"40\" step=\"1\" value={lineWidth} onChange={(event) => this.updateState({lineWidth: event.target.value})}></input>\n            </label>\n          </fieldset>\n        </div>\n\n// the code above generates items based on all the tools below\n      //\n      // <div className=\"tools\">\n      //   <button onClick={(event) => this.props.update({tools: \"pointer\"})}>\n      //     <img src={pointer} alt=\"shape tool selector\"/>\n      //   </button>\n      //   <button onClick={(event) => this.props.update({tools: \"line\"})}>\n      //       <img src={line} alt=\"shape tool selector\"/>\n      //   </button>\n      //   <button onClick={(event) => this.props.update({tools: \"rectangle\"})}>\n      //       <img src={rectangle} alt=\"shape tool selector\"/>\n      //   </button>\n      //   <button onClick={(event) => this.props.update({tools: \"ellipse\"})}>\n      //       <img src={ellipse} alt=\"shape tool selector\"/>\n      //   </button>\n      // </div>\n    )\n  }\n}\n\n\nexport default Tools;\n","import React, { Component } from 'react';\n\n\nclass SvgCode extends Component {\n\n  render() {\n    let svgClass;\n    this.props.svgCodeShow ? (svgClass = 'svgResult svgResultShow') : svgClass = 'svgResult'\n    return(\n      <div className={svgClass}>\n        <p>{this.props.svgCode}</p>\n        <button onClick={(event) => { this.props.update({svgCodeShow: false})}}>Close</button>\n      </div>\n    )\n  }\n}\n\n\nexport default SvgCode;\n","import React, { Component } from 'react';\n\nimport Board from '../components/Board';\nimport Menu from '../components/Menu';\nimport Controls from '../components/Controls';\nimport Shapes from '../components/Shapes';\nimport Tools from '../components/Tools';\nimport SvgCode from '../components/SvgCode';\n\n\n\n\nclass Home extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        tools: \"pointer\",\n        color: \"#000000\",\n        fillColor: \"#ffffff\",\n        opacity: 0.5,\n        lineWidth: 1,\n        svg: {\n          width: 200,\n          height: 200\n        },\n        shapes: {},\n        board: {},\n        svgCode: \"\",\n        svgCodeShow: false\n      }\n      \n    }\n\n\n\n    update(obj) {\n      this.setState(obj)\n    }\n\n    componentDidMount() {\n// if the screen gets too small load the blank SVG board with 200x200px by default, otherwise 400x400px\n\n      if (window.innerWidth < 500)  {\n        this.setState({...this.state, svg: {width: 200, height: 200 }})\n      } else {\n        this.setState({...this.state, svg: {width: 400, height: 400 }})\n      }\n    }\n\n    render() {\n        return(\n            <div className=\"container\">\n              <h2 className=\"logo\">SeeVG</h2>\n              <Menu {...this.state} update={this.update.bind(this)}/>\n              <Tools {...this.state} update={this.update.bind(this)}/>\n              <Board {...this.state} update={this.update.bind(this)}/>\n              <Controls  {...this.state} update={this.update.bind(this)}/>\n              <Shapes />\n              <SvgCode {...this.state} update={this.update.bind(this)}/>\n            </div>\n        )\n    }\n}\n\n\nexport default Home;\n","import React from 'react';\nimport Home from './pages/Home'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\n\nconst Routes = (\n  <Router>\n    <div>\n      <Switch>\n        <Route exact path='/' component={ Home } />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default Routes;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Main.css';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nimport Routes from './Routes'\n\nReactDOM.render(Routes, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}